{{- if .Values.storage.persistenthome }}
{{- if lookup "v1" "PersistentVolumeClaim" .Release.Namespace ( printf "%s-home" .Release.Name) }}
---
{{- else }}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-home
  annotations:
    "helm.sh/resource-policy": keep
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs-csi
{{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
      - name: notebook-container
{{- $imageTypes := dict }}
{{- $_ := set $imageTypes "Minimal NB" "cerit.io/hubs/minimalnb:26-01-2022" }}
{{- $_ := set $imageTypes "Datascience NB" "cerit.io/hubs/datasciencenb:26-01-2022" }}
{{- $_ := set $imageTypes "Scipy NB" "cerit.io/hubs/scipynb:26-01-202" }}
{{- $_ := set $imageTypes "TensorFlow NB" "cerit.io/hubs/tensorflownb:26-01-2022" }}
{{- $_ := set $imageTypes "TensorFlow 2.7.0 with GPU and TensorBoard" "cerit.io/hubs/tensorflowgpu-11-0:14-02-2022-1" }}
{{- $_ := set $imageTypes "Custom" .Values.customimage }}
        image: {{ get $imageTypes .Values.image }}
        command: ["start-notebook.sh"]
        args: [{{ printf "\"--NotebookApp.token='%s'\"" .Values.notebookToken }}]
        env:
        - name: HTTP_PROXY
          value: "http://proxy.ics.muni.cz:3128"
        - name: HTTPS_PROXY
          value: "http://proxy.ics.muni.cz:3128"
        ports:
        - containerPort: 8888
        securityContext:
          runAsUser: 1000
        resources:
          limits:
            cpu: {{ .Values.resources.maxcpu }}
            memory: {{ .Values.resources.maxram }}
            ephemeral-storage: "10Gi"
{{- if lt 0 .Values.resources.gpu }}
            nvidia.com/gpu: {{ .Values.resources.gpu }}
{{- end }}
          requests:
            cpu: {{ .Values.resources.mincpu }}
            memory: {{ .Values.resources.minram }}
{{- if lt 0 .Values.resources.gpu }}
            nvidia.com/gpu: {{ .Values.resources.gpu }}
{{- end }}
        volumeMounts:
{{- if .Values.storage.persistenthome }}
          - name: home
            mountPath: /home/jovyan
{{- end }}
{{- if and .Values.storage.enable (ne .Values.storage.server "") }}
          - name: data
            mountPath: /storage
{{- end }}
{{- if lt 0 .Values.resources.gpu }}
          - name: dshm
            mountPath: /dev/shm
{{- end }}
      volumes:
{{- if .Values.storage.persistenthome }}
        - name: home
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-home
{{- end }}
{{- if and .Values.storage.enable (ne .Values.storage.server "") }}
        - name: data
          persistentVolumeClaim:
            claimName: pvc-{{ include "storage.name" . }}
{{- end }}
{{- if lt 0 .Values.resources.gpu }}
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
{{- end }}
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Release.Name }}
spec:
  clusterIP: None
  selector:
    app: {{ .Release.Name }}
  ports:
  - protocol: TCP
    port: 8888
    targetPort: 8888
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - {{ include "dns.name" . }}
      secretName: {{ include "secret.name" . }}
  rules:
  - host: {{ include "dns.name" . }}
    http:
      paths:
      - path: /
        backend:
          service:
            name: {{ .Release.Name }} 
            port:
              number: 8888
        pathType: ImplementationSpecific
